// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "hg/proto/v1/hg.proto" (package "Hg", syntax proto3)
// tslint:disable
import { MqttClientStatus } from "../../../ciot/proto/v2/mqtt_client";
import { MqttClientCfg } from "../../../ciot/proto/v2/mqtt_client";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { BridgeReq } from "./hg_bridge";
import { TcpHealth } from "./hg_tcp";
import { Ack } from "../../../pcm/proto/v1/pcm";
import { Req } from "../../../pcm/proto/v1/pcm";
import { TcpProvReq } from "./hg_tcp";
import { BleAdv } from "./hg_ble";
import { BleHealth } from "./hg_ble";
/**
 * Message used to transport data associated with Hedro Gateway
 *
 * @generated from protobuf message Hg.Data
 */
export interface Data {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "cmd";
        /**
         * @generated from protobuf field: Hg.CmdType cmd = 2
         */
        cmd: CmdType; // Hedro gateway cmd request
    } | {
        oneofKind: "bleHealth";
        /**
         * @generated from protobuf field: Hg.BleHealth ble_health = 3
         */
        bleHealth: BleHealth; // Message containing HG BLE module health data
    } | {
        oneofKind: "bleAdv";
        /**
         * @generated from protobuf field: Hg.BleAdv ble_adv = 4
         */
        bleAdv: BleAdv; // Message received by HG Ble module from a remote ble sensor
    } | {
        oneofKind: "provReq";
        /**
         * @generated from protobuf field: Hg.TcpProvReq prov_req = 5
         */
        provReq: TcpProvReq; // Message containing an provisioning request
    } | {
        oneofKind: "pcmReq";
        /**
         * @generated from protobuf field: Pcm.Req pcm_req = 6
         */
        pcmReq: Req; // PCM request;
    } | {
        oneofKind: "pcmAck";
        /**
         * @generated from protobuf field: Pcm.Ack pcm_ack = 7
         */
        pcmAck: Ack; // PCM ack
    } | {
        oneofKind: "tcpHealth";
        /**
         * @generated from protobuf field: Hg.TcpHealth tcp_health = 9
         */
        tcpHealth: TcpHealth; // Message containing HG TCP module health data
    } | {
        oneofKind: "bridgeReq";
        /**
         * @generated from protobuf field: Hg.BridgeReq bridge_req = 10
         */
        bridgeReq: BridgeReq; // Message containing HG Bridge request
    } | {
        oneofKind: "dfuType";
        /**
         * @generated from protobuf field: Hg.DfuType dfu_type = 99
         */
        dfuType: DfuType; // DFU type
    } | {
        oneofKind: undefined;
    };
}
/**
 * HG Cmd Types
 *
 * @generated from protobuf enum Hg.CmdType
 */
export enum CmdType {
    /**
     * Unknown cmd
     *
     * @generated from protobuf enum value: CMD_TYPE_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * Restart cmd
     *
     * @generated from protobuf enum value: CMD_TYPE_RESTART = 1;
     */
    RESTART = 1,
    /**
     * Reset cmd
     *
     * @generated from protobuf enum value: CMD_TYPE_RESET = 2;
     */
    RESET = 2,
    /**
     * DFU cmd
     *
     * @generated from protobuf enum value: CMD_TYPE_DFU = 3;
     */
    DFU = 3,
    /**
     * Toggle access point cmd
     *
     * @generated from protobuf enum value: CMD_TYPE_TOGGLE_AP = 4;
     */
    TOGGLE_AP = 4,
    /**
     * Get device identity data
     *
     * @generated from protobuf enum value: CMD_TYPE_GET_IDENTITY = 5;
     */
    GET_IDENTITY = 5,
    /**
     * Get health data
     *
     * @generated from protobuf enum value: CMD_TYPE_GET_HEALTH = 6;
     */
    GET_HEALTH = 6,
    /**
     * Set DFU type cmd
     *
     * @generated from protobuf enum value: CMD_TYPE_SET_DFU_TYPE = 99;
     */
    SET_DFU_TYPE = 99,
    /**
     * Get DFU type cmd
     *
     * @generated from protobuf enum value: CMD_TYPE_GET_DFU_TYPE = 100;
     */
    GET_DFU_TYPE = 100,
    /**
     * Delete migrated settings cmd
     *
     * @generated from protobuf enum value: CMD_TYPE_DELETE_MIGRATED_SETTINGS = 101;
     */
    DELETE_MIGRATED_SETTINGS = 101
}
/**
 * HG DFU type
 *
 * @generated from protobuf enum Hg.DfuType
 */
export enum DfuType {
    /**
     * OLD DFU used to upgrade devices with 3.X.X firmware versions
     *
     * @generated from protobuf enum value: DFU_TYPE_OLD = 0;
     */
    OLD = 0,
    /**
     * NEW DFU used to update devices with  4.X.X firmware versions
     *
     * @generated from protobuf enum value: DFU_TYPE_NEW = 1;
     */
    NEW = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class Data$Type extends MessageType<Data> {
    constructor() {
        super("Hg.Data", [
            { no: 2, name: "cmd", kind: "enum", oneof: "type", T: () => ["Hg.CmdType", CmdType, "CMD_TYPE_"] },
            { no: 3, name: "ble_health", kind: "message", oneof: "type", T: () => BleHealth },
            { no: 4, name: "ble_adv", kind: "message", oneof: "type", T: () => BleAdv },
            { no: 5, name: "prov_req", kind: "message", oneof: "type", T: () => TcpProvReq },
            { no: 6, name: "pcm_req", kind: "message", oneof: "type", T: () => Req },
            { no: 7, name: "pcm_ack", kind: "message", oneof: "type", T: () => Ack },
            { no: 9, name: "tcp_health", kind: "message", oneof: "type", T: () => TcpHealth },
            { no: 10, name: "bridge_req", kind: "message", oneof: "type", T: () => BridgeReq },
            { no: 99, name: "dfu_type", kind: "enum", oneof: "type", T: () => ["Hg.DfuType", DfuType, "DFU_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<Data>): Data {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Data>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Data): Data {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Hg.CmdType cmd */ 2:
                    message.type = {
                        oneofKind: "cmd",
                        cmd: reader.int32()
                    };
                    break;
                case /* Hg.BleHealth ble_health */ 3:
                    message.type = {
                        oneofKind: "bleHealth",
                        bleHealth: BleHealth.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).bleHealth)
                    };
                    break;
                case /* Hg.BleAdv ble_adv */ 4:
                    message.type = {
                        oneofKind: "bleAdv",
                        bleAdv: BleAdv.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).bleAdv)
                    };
                    break;
                case /* Hg.TcpProvReq prov_req */ 5:
                    message.type = {
                        oneofKind: "provReq",
                        provReq: TcpProvReq.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).provReq)
                    };
                    break;
                case /* Pcm.Req pcm_req */ 6:
                    message.type = {
                        oneofKind: "pcmReq",
                        pcmReq: Req.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).pcmReq)
                    };
                    break;
                case /* Pcm.Ack pcm_ack */ 7:
                    message.type = {
                        oneofKind: "pcmAck",
                        pcmAck: Ack.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).pcmAck)
                    };
                    break;
                case /* Hg.TcpHealth tcp_health */ 9:
                    message.type = {
                        oneofKind: "tcpHealth",
                        tcpHealth: TcpHealth.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).tcpHealth)
                    };
                    break;
                case /* Hg.BridgeReq bridge_req */ 10:
                    message.type = {
                        oneofKind: "bridgeReq",
                        bridgeReq: BridgeReq.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).bridgeReq)
                    };
                    break;
                case /* Hg.DfuType dfu_type */ 99:
                    message.type = {
                        oneofKind: "dfuType",
                        dfuType: reader.int32()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Data, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Hg.CmdType cmd = 2; */
        if (message.type.oneofKind === "cmd")
            writer.tag(2, WireType.Varint).int32(message.type.cmd);
        /* Hg.BleHealth ble_health = 3; */
        if (message.type.oneofKind === "bleHealth")
            BleHealth.internalBinaryWrite(message.type.bleHealth, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* Hg.BleAdv ble_adv = 4; */
        if (message.type.oneofKind === "bleAdv")
            BleAdv.internalBinaryWrite(message.type.bleAdv, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* Hg.TcpProvReq prov_req = 5; */
        if (message.type.oneofKind === "provReq")
            TcpProvReq.internalBinaryWrite(message.type.provReq, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* Pcm.Req pcm_req = 6; */
        if (message.type.oneofKind === "pcmReq")
            Req.internalBinaryWrite(message.type.pcmReq, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* Pcm.Ack pcm_ack = 7; */
        if (message.type.oneofKind === "pcmAck")
            Ack.internalBinaryWrite(message.type.pcmAck, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* Hg.TcpHealth tcp_health = 9; */
        if (message.type.oneofKind === "tcpHealth")
            TcpHealth.internalBinaryWrite(message.type.tcpHealth, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* Hg.BridgeReq bridge_req = 10; */
        if (message.type.oneofKind === "bridgeReq")
            BridgeReq.internalBinaryWrite(message.type.bridgeReq, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* Hg.DfuType dfu_type = 99; */
        if (message.type.oneofKind === "dfuType")
            writer.tag(99, WireType.Varint).int32(message.type.dfuType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Hg.Data
 */
export const Data = new Data$Type();
/**
 * @generated ServiceType for protobuf service Hg.MqttTranslatorService
 */
export const MqttTranslatorService = new ServiceType("Hg.MqttTranslatorService", [
    { name: "Start", options: {}, I: MqttClientCfg, O: MqttClientStatus }
]);
