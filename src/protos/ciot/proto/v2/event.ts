// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "ciot/proto/v2/event.proto" (package "Ciot", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { BleAdv } from "../../../hg/proto/v1/hg_ble";
import { BleHealth } from "../../../hg/proto/v1/hg_ble";
import { TcpHealth } from "../../../hg/proto/v1/hg_tcp";
import { TcpProvAvailable } from "../../../hg/proto/v1/hg_tcp";
import { Ack } from "../../../pcm/proto/v1/pcm";
import { Msg } from "./msg";
/**
 * Message representing an CIoT event
 *
 * @generated from protobuf message Ciot.Event
 */
export interface Event {
    /**
     * @generated from protobuf field: Ciot.EventType type = 1
     */
    type: EventType; // Event type
    /**
     * @generated from protobuf oneof: data
     */
    data: {
        oneofKind: "msg";
        /**
         * @generated from protobuf field: Ciot.Msg msg = 2
         */
        msg: Msg; // Event message
    } | {
        oneofKind: "raw";
        /**
         * @generated from protobuf field: bytes raw = 3
         */
        raw: Uint8Array; // Event raw data
    } | {
        oneofKind: "pcmAck";
        /**
         * @generated from protobuf field: Pcm.Ack pcm_ack = 4
         */
        pcmAck: Ack; // Event pcm ack
    } | {
        oneofKind: "provAvailable";
        /**
         * @generated from protobuf field: Hg.TcpProvAvailable prov_available = 5
         */
        provAvailable: TcpProvAvailable; // Event tcp prov available
    } | {
        oneofKind: "tcpHealth";
        /**
         * @generated from protobuf field: Hg.TcpHealth tcp_health = 6
         */
        tcpHealth: TcpHealth; // Event tcp health
    } | {
        oneofKind: "bleHealth";
        /**
         * @generated from protobuf field: Hg.BleHealth ble_health = 7
         */
        bleHealth: BleHealth; // Event ble health
    } | {
        oneofKind: "bleAdv";
        /**
         * @generated from protobuf field: Hg.BleAdv ble_adv = 8
         */
        bleAdv: BleAdv; // Event ble adv
    } | {
        oneofKind: undefined;
    };
}
/**
 * Enum representing different event types
 *
 * @generated from protobuf enum Ciot.EventType
 */
export enum EventType {
    /**
     * Unknown event type
     *
     * @generated from protobuf enum value: EVENT_TYPE_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * Event data
     *
     * @generated from protobuf enum value: EVENT_TYPE_DATA = 1;
     */
    DATA = 1,
    /**
     * Event interface started
     *
     * @generated from protobuf enum value: EVENT_TYPE_STARTED = 2;
     */
    STARTED = 2,
    /**
     * Event interface stopped
     *
     * @generated from protobuf enum value: EVENT_TYPE_STOPPED = 3;
     */
    STOPPED = 3,
    /**
     * Event error
     *
     * @generated from protobuf enum value: EVENT_TYPE_ERROR = 4;
     */
    ERROR = 4,
    /**
     * Event request
     *
     * @generated from protobuf enum value: EVENT_TYPE_REQUEST = 5;
     */
    REQUEST = 5,
    /**
     * Event request done
     *
     * @generated from protobuf enum value: EVENT_TYPE_DONE = 6;
     */
    DONE = 6,
    /**
     * Event interface state changed
     *
     * @generated from protobuf enum value: EVENT_TYPE_STATE_CHANGED = 7;
     */
    STATE_CHANGED = 7,
    /**
     * Event internal
     *
     * @generated from protobuf enum value: EVENT_TYPE_INTERNAL = 8;
     */
    INTERNAL = 8,
    /**
     * Event custom
     *
     * @generated from protobuf enum value: EVENT_TYPE_CUSTOM = 9;
     */
    CUSTOM = 9
}
// @generated message type with reflection information, may provide speed optimized methods
class Event$Type extends MessageType<Event> {
    constructor() {
        super("Ciot.Event", [
            { no: 1, name: "type", kind: "enum", T: () => ["Ciot.EventType", EventType, "EVENT_TYPE_"] },
            { no: 2, name: "msg", kind: "message", oneof: "data", T: () => Msg },
            { no: 3, name: "raw", kind: "scalar", oneof: "data", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "pcm_ack", kind: "message", oneof: "data", T: () => Ack },
            { no: 5, name: "prov_available", kind: "message", oneof: "data", T: () => TcpProvAvailable },
            { no: 6, name: "tcp_health", kind: "message", oneof: "data", T: () => TcpHealth },
            { no: 7, name: "ble_health", kind: "message", oneof: "data", T: () => BleHealth },
            { no: 8, name: "ble_adv", kind: "message", oneof: "data", T: () => BleAdv }
        ]);
    }
    create(value?: PartialMessage<Event>): Event {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = 0;
        message.data = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Event>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event): Event {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.EventType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* Ciot.Msg msg */ 2:
                    message.data = {
                        oneofKind: "msg",
                        msg: Msg.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).msg)
                    };
                    break;
                case /* bytes raw */ 3:
                    message.data = {
                        oneofKind: "raw",
                        raw: reader.bytes()
                    };
                    break;
                case /* Pcm.Ack pcm_ack */ 4:
                    message.data = {
                        oneofKind: "pcmAck",
                        pcmAck: Ack.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).pcmAck)
                    };
                    break;
                case /* Hg.TcpProvAvailable prov_available */ 5:
                    message.data = {
                        oneofKind: "provAvailable",
                        provAvailable: TcpProvAvailable.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).provAvailable)
                    };
                    break;
                case /* Hg.TcpHealth tcp_health */ 6:
                    message.data = {
                        oneofKind: "tcpHealth",
                        tcpHealth: TcpHealth.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).tcpHealth)
                    };
                    break;
                case /* Hg.BleHealth ble_health */ 7:
                    message.data = {
                        oneofKind: "bleHealth",
                        bleHealth: BleHealth.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).bleHealth)
                    };
                    break;
                case /* Hg.BleAdv ble_adv */ 8:
                    message.data = {
                        oneofKind: "bleAdv",
                        bleAdv: BleAdv.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).bleAdv)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.EventType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* Ciot.Msg msg = 2; */
        if (message.data.oneofKind === "msg")
            Msg.internalBinaryWrite(message.data.msg, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bytes raw = 3; */
        if (message.data.oneofKind === "raw")
            writer.tag(3, WireType.LengthDelimited).bytes(message.data.raw);
        /* Pcm.Ack pcm_ack = 4; */
        if (message.data.oneofKind === "pcmAck")
            Ack.internalBinaryWrite(message.data.pcmAck, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* Hg.TcpProvAvailable prov_available = 5; */
        if (message.data.oneofKind === "provAvailable")
            TcpProvAvailable.internalBinaryWrite(message.data.provAvailable, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* Hg.TcpHealth tcp_health = 6; */
        if (message.data.oneofKind === "tcpHealth")
            TcpHealth.internalBinaryWrite(message.data.tcpHealth, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* Hg.BleHealth ble_health = 7; */
        if (message.data.oneofKind === "bleHealth")
            BleHealth.internalBinaryWrite(message.data.bleHealth, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* Hg.BleAdv ble_adv = 8; */
        if (message.data.oneofKind === "bleAdv")
            BleAdv.internalBinaryWrite(message.data.bleAdv, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.Event
 */
export const Event = new Event$Type();
